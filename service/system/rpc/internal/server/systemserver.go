// Code generated by goctl. DO NOT EDIT.
// Source: system.proto

package server

import (
	"context"

	"epick-mall/service/system/rpc/internal/logic"
	"epick-mall/service/system/rpc/internal/svc"
	"epick-mall/service/system/rpc/system"
)

type SystemServer struct {
	svcCtx *svc.ServiceContext
	system.UnimplementedSystemServer
}

func NewSystemServer(svcCtx *svc.ServiceContext) *SystemServer {
	return &SystemServer{
		svcCtx: svcCtx,
	}
}

func (s *SystemServer) Login(ctx context.Context, in *system.LoginReq) (*system.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *SystemServer) UserInfo(ctx context.Context, in *system.InfoReq) (*system.InfoResp, error) {
	l := logic.NewUserInfoLogic(ctx, s.svcCtx)
	return l.UserInfo(in)
}

func (s *SystemServer) UserAdd(ctx context.Context, in *system.UserAddReq) (*system.UserAddResp, error) {
	l := logic.NewUserAddLogic(ctx, s.svcCtx)
	return l.UserAdd(in)
}

func (s *SystemServer) UserUpdate(ctx context.Context, in *system.UserUpdateReq) (*system.UserUpdateResp, error) {
	l := logic.NewUserUpdateLogic(ctx, s.svcCtx)
	return l.UserUpdate(in)
}

func (s *SystemServer) UserDelete(ctx context.Context, in *system.UserDeleteReq) (*system.UserDeleteResp, error) {
	l := logic.NewUserDeleteLogic(ctx, s.svcCtx)
	return l.UserDelete(in)
}

func (s *SystemServer) UserList(ctx context.Context, in *system.UserListReq) (*system.UserListResp, error) {
	l := logic.NewUserListLogic(ctx, s.svcCtx)
	return l.UserList(in)
}

func (s *SystemServer) ResetPassword(ctx context.Context, in *system.ResetPasswordReq) (*system.ResetPasswordResp, error) {
	l := logic.NewResetPasswordLogic(ctx, s.svcCtx)
	return l.ResetPassword(in)
}

func (s *SystemServer) RoleAdd(ctx context.Context, in *system.RoleAddReq) (*system.RoleAddResp, error) {
	l := logic.NewRoleAddLogic(ctx, s.svcCtx)
	return l.RoleAdd(in)
}

func (s *SystemServer) RoleUpdate(ctx context.Context, in *system.RoleUpdateReq) (*system.RoleUpdateResp, error) {
	l := logic.NewRoleUpdateLogic(ctx, s.svcCtx)
	return l.RoleUpdate(in)
}

func (s *SystemServer) RoleDelete(ctx context.Context, in *system.RoleDeleteReq) (*system.RoleDeleteResp, error) {
	l := logic.NewRoleDeleteLogic(ctx, s.svcCtx)
	return l.RoleDelete(in)
}

func (s *SystemServer) RoleList(ctx context.Context, in *system.RoleListReq) (*system.RoleListResp, error) {
	l := logic.NewRoleListLogic(ctx, s.svcCtx)
	return l.RoleList(in)
}

func (s *SystemServer) QueryMenuByRoleId(ctx context.Context, in *system.QueryMenuByRoleIdReq) (*system.QueryMenuByRoleIdResp, error) {
	l := logic.NewQueryMenuByRoleIdLogic(ctx, s.svcCtx)
	return l.QueryMenuByRoleId(in)
}

func (s *SystemServer) UpdateMenuRole(ctx context.Context, in *system.UpdateMenuRoleReq) (*system.UpdateMenuRoleResp, error) {
	l := logic.NewUpdateMenuRoleLogic(ctx, s.svcCtx)
	return l.UpdateMenuRole(in)
}

func (s *SystemServer) MenuAdd(ctx context.Context, in *system.MenuAddReq) (*system.MenuAddResp, error) {
	l := logic.NewMenuAddLogic(ctx, s.svcCtx)
	return l.MenuAdd(in)
}

func (s *SystemServer) MenuList(ctx context.Context, in *system.MenuListReq) (*system.MenuListResp, error) {
	l := logic.NewMenuListLogic(ctx, s.svcCtx)
	return l.MenuList(in)
}

func (s *SystemServer) MenuUpdate(ctx context.Context, in *system.MenuUpdateReq) (*system.MenuUpdateResp, error) {
	l := logic.NewMenuUpdateLogic(ctx, s.svcCtx)
	return l.MenuUpdate(in)
}

func (s *SystemServer) MenuDelete(ctx context.Context, in *system.MenuDeleteReq) (*system.MenuDeleteResp, error) {
	l := logic.NewMenuDeleteLogic(ctx, s.svcCtx)
	return l.MenuDelete(in)
}

func (s *SystemServer) LoginLogAdd(ctx context.Context, in *system.LoginLogAddReq) (*system.LoginLogAddResp, error) {
	l := logic.NewLoginLogAddLogic(ctx, s.svcCtx)
	return l.LoginLogAdd(in)
}

func (s *SystemServer) LoginLogList(ctx context.Context, in *system.LoginLogListReq) (*system.LoginLogListResp, error) {
	l := logic.NewLoginLogListLogic(ctx, s.svcCtx)
	return l.LoginLogList(in)
}

func (s *SystemServer) LoginLogDelete(ctx context.Context, in *system.LoginLogDeleteReq) (*system.LoginLogDeleteResp, error) {
	l := logic.NewLoginLogDeleteLogic(ctx, s.svcCtx)
	return l.LoginLogDelete(in)
}

func (s *SystemServer) LogAdd(ctx context.Context, in *system.LogAddReq) (*system.LogAddResp, error) {
	l := logic.NewLogAddLogic(ctx, s.svcCtx)
	return l.LogAdd(in)
}
