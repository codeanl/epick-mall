// Code generated by goctl. DO NOT EDIT.
// Source: coupon.proto

package couponclient

import (
	"context"

	"epick-mall/service/coupon/rpc/coupon"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CouponAddReq     = coupon.CouponAddReq
	CouponAddResp    = coupon.CouponAddResp
	CouponDeleteReq  = coupon.CouponDeleteReq
	CouponDeleteResp = coupon.CouponDeleteResp
	CouponListData   = coupon.CouponListData
	CouponListReq    = coupon.CouponListReq
	CouponListResp   = coupon.CouponListResp
	CouponUpdateReq  = coupon.CouponUpdateReq
	CouponUpdateResp = coupon.CouponUpdateResp

	Coupon interface {
		CouponAdd(ctx context.Context, in *CouponAddReq, opts ...grpc.CallOption) (*CouponAddResp, error)
		CouponList(ctx context.Context, in *CouponListReq, opts ...grpc.CallOption) (*CouponListResp, error)
		CouponUpdate(ctx context.Context, in *CouponUpdateReq, opts ...grpc.CallOption) (*CouponUpdateResp, error)
		CouponDelete(ctx context.Context, in *CouponDeleteReq, opts ...grpc.CallOption) (*CouponDeleteResp, error)
	}

	defaultCoupon struct {
		cli zrpc.Client
	}
)

func NewCoupon(cli zrpc.Client) Coupon {
	return &defaultCoupon{
		cli: cli,
	}
}

func (m *defaultCoupon) CouponAdd(ctx context.Context, in *CouponAddReq, opts ...grpc.CallOption) (*CouponAddResp, error) {
	client := coupon.NewCouponClient(m.cli.Conn())
	return client.CouponAdd(ctx, in, opts...)
}

func (m *defaultCoupon) CouponList(ctx context.Context, in *CouponListReq, opts ...grpc.CallOption) (*CouponListResp, error) {
	client := coupon.NewCouponClient(m.cli.Conn())
	return client.CouponList(ctx, in, opts...)
}

func (m *defaultCoupon) CouponUpdate(ctx context.Context, in *CouponUpdateReq, opts ...grpc.CallOption) (*CouponUpdateResp, error) {
	client := coupon.NewCouponClient(m.cli.Conn())
	return client.CouponUpdate(ctx, in, opts...)
}

func (m *defaultCoupon) CouponDelete(ctx context.Context, in *CouponDeleteReq, opts ...grpc.CallOption) (*CouponDeleteResp, error) {
	client := coupon.NewCouponClient(m.cli.Conn())
	return client.CouponDelete(ctx, in, opts...)
}
